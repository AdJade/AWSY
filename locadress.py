# -*- coding: utf-8 -*-
"""Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/notebooks/welcome.ipynb
"""

import requests
import json
import time 
from pyzillow.pyzillow import ZillowWrapper, GetDeepSearchResults
from geopy.geocoders import GoogleV3
import pandas as pd
import re

class GooglePlaces(object):
    def __init__(self, apiKey):
        super(GooglePlaces, self).__init__()
        self.apiKey = "AIzaSyCdbYjagJu727nxM-h5zsyuOEfhy2BxnMo"
 
    def search_places_by_coordinate(self, location, radius):
        endpoint_url = "https://maps.googleapis.com/maps/api/place/nearbysearch/json"
        places = []
        params = {
            'location': location,
            'radius': radius,
            'key': self.apiKey
        }
        res = requests.get(endpoint_url, params = params)
        results =  json.loads(res.content)
        places.extend(results['results'])
        time.sleep(2)
        while "next_page_token" in results:
            params['pagetoken'] = results['next_page_token'],
            res = requests.get(endpoint_url, params = params)
            results = json.loads(res.content)
            places.extend(results['results'])
            time.sleep(2)
        return places
   

if __name__ == '__main__':
    loc_x = "37.540145"
    loc_y = "-121.946676"
    api = GooglePlaces("Your API key")
    places = api.search_places_by_coordinate(loc_x+","+loc_y, "100")
    d = {'types': []}
    df = pd.DataFrame(data=d)
    setter =3
    if(len(places)<3):
      setter = len(places)

    for z in range(0,setter):
      x = places[z]
      if "price_level" in x:
        f = {'name': [x["name"]],'types': [x["types"]],'price_level': [x["price_level"]]}
      else:
        f = {'name': [x["name"]],'types': [x["types"]],'price_level': ["null"]}
      lf = pd.DataFrame(data=f)
      df =df.append(lf, ignore_index = True)

geolocator = GoogleV3(api_key="AIzaSyCdbYjagJu727nxM-h5zsyuOEfhy2BxnMo")
locations = geolocator.reverse(loc_x + ", " + loc_y)
f = locations[0].address.split(",")
n = re.sub("[^0-9]", "", f[2])

address = f[0] +"," + f[1]
zipcode = n
zillow_data = ZillowWrapper('X1-ZWz17kv04h00sr_2m43a')
try:
  deep_search_response = zillow_data.get_deep_search_results(address,n)
  result = GetDeepSearchResults(deep_search_response)
  housing = True;
except:
  housing = False;